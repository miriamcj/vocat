@import "partials/images";


// Base mixins
// -----------

// Media queries
// --------------------------------------------------------
// Respond to viewport size
// --------------------------
@mixin respond-min($width) {
	@media all and (min-width: $width) {
		@content;
	}
}

@mixin respond-max($width) {
	@media all and (max-width: $width) {
		@content;
	}
}

@mixin respond-min-height($height) {
	@media all and (min-height: $height) {
		@content;
	}
}

@mixin respond-max-height($height) {
	@media all and (max-height: $height) {
		@content;
	}
}

// Respond to pixel density
// --------------------------
@mixin respond-min-density($density: 1.5) {
	@media only screen and (-Webkit-min-device-pixel-ratio: $density),
	only screen and (-moz-min-device-pixel-ratio: $density),
	only screen and (min-device-pixel-ratio: $density) {
		@content;
	}
}

// Utilities
// --------------------------------------------------------

// Sprite positions
// http://spritegen.website-performance.org/
// Be sure to replace '.' with '%'
// when pasting new positions
// --------------------------
%sprite-example{ background-position: 0 0; }

@mixin sprite($sprite) {
	background-image: url('../Images/sprite.png');
	background-repeat: no-repeat;
	@extend %sprite-#{$sprite};
}

// Clearfix
// --------------------------
@mixin clearfix() {
	&:after {
	  content: "";
	  display: table;
	  clear: both;
	}
}

%clearfix, .clearfix {
	@include clearfix();
}

// Kill ye FOUT -
// Depends on javascript adding the .wf-active class...
// --------------------------------------------------------
@mixin kill-fout {
	visibility: hidden;
	.wf-active &, // Show when fonts become active
	.wf-inactive &, // Show when fonts fail to load
	.no-js & { // Show if no javascript
		visibility: visible;
	}
}

// Properties that require browser prefixes
// --------------------------------------------------------
// Hyphenation
// NB this doesn't work in Chrome
// --------------------------
@mixin hyphenate {
	-moz-hyphens: auto;
	-webkit-hyphens: auto;
	hyphens: auto;
}

// Background-size
// Only necessary for 'cover' &
// 'contain'
// --------------------------
@mixin background-size($value) {
	-webkit-background-size: $value;
	-moz-background-size: $value;
	-o-background-size: $value;
	background-size: $value;
}

// Background clip
// $portion can take 'border',
// 'padding', or 'content'
// --------------------------
@mixin background-clip($portion) {
	-webkit-background-clip: $portion;
	-moz-background-clip: $portion;
	background-clip: #{$portion}-box;
}

// Box sizing
// $value can take 'border-box'
// or 'content-box'
// --------------------------
@mixin box-sizing($value) {
	-webkit-box-sizing: $value;
	-moz-box-sizing: $value;
	box-sizing: $value;
}

// Translate
// --------------------------
@mixin translate($x, $y) {
	-webkit-transform: translate($x, $y);
	-moz-transform: translate($x, $y);
	-ms-transform: translate($x, $y);
	-o-transform: translate($x, $y);
	transform: translate($x, $y);
}

// Rotate
// --------------------------
@mixin rotate($degrees, $origin: 0 0) {
	-webkit-transform: rotate($degrees);
	-moz-transform: rotate($degrees);
	-ms-transform: rotate($degrees);
	-o-transform: rotate($degrees);
	transform: rotate($degrees);
	-webkit-transform-origin: $origin;
	-moz-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-o-transform-origin: $origin;
	transform-origin: $origin;
}

// Transitions
// --------------------------
@mixin transition($transition) {
	-webkit-transition: $transition;
	-moz-transition: $transition;
	-ms-transition: $transition;
	-o-transition: $transition;
	transition: $transition;
}

// Border radius
// --------------------------
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;
}

// Box shadow
// --------------------------
@mixin box-shadow($shadows...) {
	-webkit-box-shadow: $shadows;
	-moz-box-shadow: $shadows;
	box-shadow: $shadows;
}

// Gradients
// --------------------------
@mixin gradient-vertical($startColor: #555, $endColor: #333) {
	background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
	background-image: -ms-linear-gradient(top, $startColor, $endColor); // IE10
	background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
	background-image: -o-linear-gradient(top, $startColor, $endColor); // Opera 11.10
	background-image: linear-gradient(top, $startColor, $endColor); // The standard
	background-repeat: repeat-x;
}

// Opacity
// --------------------------
@mixin opacity($opacity: 100) {
	opacity: $opacity / 100;
	filter: alpha(opacity=$opacity);
}

// Appearance
// Possible values listed here:
// http://css-tricks.com/almanac/properties/a/appearance/
// Usually has to override styles in normalize/reset
// --------------------------
@mixin appearance($value) {
	-webkit-appearance: $value !important;
	-moz-appearance: $value !important;
	appearance: $value !important;
}

// Selection background
// --------------------------
@mixin selection($color) {
	::-moz-selection {
	    background: $color;
	    text-shadow: none;
	}
	::selection {
	    background: $color;
	    text-shadow: none;
	}
}

// Placeholder text
// --------------------------
@mixin placeholder($color, $style: normal) {
  &::-webkit-input-placeholder {
    @include font-body;
    color: $color;
    font-style: $style;
  }
  &:-moz-placeholder {
    @include font-body;
    color: $color;
    font-style: $style;
  }
  &::-moz-placeholder {
    @include font-body;
    color: $color;
    font-style: $style;
  }
  &:-ms-input-placeholder {
    @include font-body;
    color: $color;
    font-style: $style;
  }
}

// Translate
// Set $z to 'false' to disable 'translate3d' & 'translateZ' for Webkit, which
// enable hardware acceleration on mobile devices
// --------------------------
@mixin translate($x, $y, $z: true) {
  @if $z == true {
    -webkit-transform: translate3d($x, $y, 0);
  }
  @else {
    -webkit-transform: translate($x, $y);
  }
  -moz-transform: translate($x, $y);
  -ms-transform: translate($x, $y);
  -o-transform: translate($x, $y);
  transform: translate($x, $y);
}


@mixin translateX($x, $z: true) {
  @if $z == true {
    -webkit-transform: translateX($x) translateZ(0);
  }
  @else {
    -webkit-transform: translateX($x);
  }
  -moz-transform: translateX($x);
  -ms-transform: translateX($x);
  -o-transform: translateX($x);
  transform: translateX($x);
}

@mixin translateY($y, $z: true) {
  @if $z == true {
    -webkit-transform: translateY($y) translateZ(0);
  }
  @else {
    -webkit-transform: translateY($y);
  }
  -moz-transform: translateY($y);
  -ms-transform: translateY($y);
  -o-transform: translateY($y);
  transform: translateY($y);
}

@mixin no-translate {
  -webkit-transform: none;
  -moz-transform: none;
  -ms-transform: none;
  -o-transform: none;
  transform: none;
}

// PROJECT Mixins


// Project specific mixins
// -----------------------

// Rems
// --------------------------
@mixin font-size($size) {
  @if $usage == closed {
    font-size: $size + px;
    font-size: ($size / 10) + rem;
    // Bumps all font-sizes down a notch if there's no javascript
    .no-js & {
      font-size: ($size - 1) + px;
      font-size: (($size - 1) / 10) + rem;
    }
  }
  @else {
    font-size: ($size - 1) + px;
    font-size: (($size - 1) / 10) + rem;
  }
}

@mixin rem($property, $integer) {
  #{$property}: $integer * 16px;
  #{$property}: $integer * 1rem;
}

// Detect IE10
// --------------------------
@mixin newIE {
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    @content;
  }
  .ie9 & {
    @content;
  }
}

// SVG backgrounds
// PNG version must be in png directory for fallback to work
// --------------------------
@mixin svg($image) {
  @extend %icon-#{$image};
  background-size: contain;
  background-position: left top;
  background-repeat: no-repeat;
  .no-inlinesvg & {
    @extend .png-#{$image};
  }
  @include newIE {
    background-size: 90% auto;
  }
}

// Font Mixins
// --------------------------
@mixin font-body {
  @include kill-fout;
  // This is only supported by Firefox, currently
  font-size-adjust: 0.49;
  @if $usage == closed {
    font-family: "proxima-nova", "OpenSans", helvetica, sans-serif;
  }
  @else {
    font-family: "OpenSans", helvetica, sans-serif;
  }
}

@mixin font-head {
  font-family: "proxima-nova", helvetica, sans-serif;
  font-weight: normal;
  font-size-adjust: none;
}

// Utilities
// --------------------------------------------------------
// Full bleed
// $direction accepts 'up', 'down' or 'none';
// NB using 'up' or 'down' causes the shadow to
// extend to the top or bottom of the viewport
// Only use 'none' on relatively wide elements,
// and set $width to the width of the element
// --------------------------
@mixin full-bleed($color, $direction: none, $width: 400em) {
  @if $direction == none {
    box-shadow: -$width 0 0 0 $color, $width 0 0 0 $color, (-$width * 2) 0 0 0 $color, ($width * 2) 0 0 0 $color;
  }
  @if $direction == down {
    box-shadow: 0 $width 0 $width $color;
  }
  @if $direction == up {
    box-shadow: 0 (-$width) 0 $width $color;
  }
  background-color: $color;
}

