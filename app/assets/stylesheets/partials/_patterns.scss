// Patterns
// --------

// Really basic utility patterns
// --------------------------------------------------------
%pull-left {
	float: left;
}

%pull-right {
	float: right;
}

%center {
	margin-right: auto;
	margin-left: auto;
}

// Transitions
// --------------------------------------------------------
%fade-background-color {
  @include transition(0.05s background-color ease-out);
}

%fade-color {
  @include transition(0.05s color ease-out);
}

// Typography
// --------------------------------------------------------
// Hierarchy
// --------------------------
%alpha {
  @include font-size(21.75);
}

%beta {
  @include font-size(20.25);
}

%beta-alt {
  @include font-size(19);
}

%gamma-sup {
  @include font-size(18);
}

%gamma {
  @include font-size(17);
}

%gamma-sub {
  @include font-size(16);
}

%delta {
  @include font-size(13.75);
}

%epsilon {
  @include font-size(12.75);
}

%epsilon-caps {
  @include font-size(12.75);
  font-weight: $medium;
  text-transform: uppercase;
}

// Extra-hierarchy
// Very large & very small type,
// outside the above hierarchy
// Employs SI prefixes
// --------------------------
%tera {
  @include font-size(49.2);
}

%giga {
  @include font-size(42.9);
}

%giga-alt {
  @include font-size(41.75);
}

%mega-alt {
  @include font-size(34);
}

%mega-sup {
  @include font-size(29);
}

%mega {
  @include font-size(27.4);
}

%kilo {
  @include font-size(24.4);
}

%deci {
  // @include font-size(0.2);
}

// Block-level
// --------------------------
// Extended by h1-6
%heading {
  font-weight: $regular;
	margin: 0;
  a {
    @extend %bare-link;
    @extend %orange-hover;
    display: inline-block;
  }
}

%heading-caps {
  text-transform: uppercase;
  letter-spacing: 0.15em;
}

// Headings
// ------------
%heading-tera {
  @extend %tera;
  @include font-head;
  text-transform: uppercase;
  line-height: 1;
  color: $teal;
}

%heading-giga {
  @extend %giga;
  @include font-head;
  text-transform: uppercase;
  line-height: 1;
  color: $teal;
}

%heading-mega-sup {
  @extend %mega-sup;
  @include font-head;
  text-transform: uppercase;
  line-height: 1;
  color: $tealMedium;
}

%heading-alpha {
  @extend %alpha;
  font-weight: $medium;
  line-height: 1;
  color: $teal;
}

%heading-beta-alt {
  @extend %beta-alt;
  @extend %heading-caps;
  font-weight: $bold;
  line-height: 1;
}

%heading-gamma-sup {
  @extend %gamma-sup;
  @extend %heading-caps;
  font-weight: $bold;
  line-height: 1;
}

%heading-epsilon {
  @extend %epsilon;
  @extend %heading-caps;
  font-weight: $medium;
  line-height: 1;
}

// Inline
// --------------------------

// Links
// --------------------------
// https://github.com/h5bp/html5-boilerplate/blob/master/css/main.css#L120
%hidden-text {
	background-color: transparent;
    border: 0;
    overflow: hidden;
    *text-indent: -9999px;
    &:before {
	    content: "";
	    display: block;
	    width: 0;
	    height: 100%;
    }
}

%inactive-link {
  pointer-events: none;
  cursor: default;
}

%box-link {
  display: block;
  width: 100%;
  height: 100%;
}

%orange-hover {
  &:hover {
    color: $orange;
  }
}

%bare-link {
  color: inherit;
  &:hover {
    text-decoration: none;
  }
}

%bare-focus {
  &:focus {
    outline: none;
  }
}

// Buttons & pills
// --------------------------
// To be read in your best Werner Herzog voice:
// "The notion from which all other buttons
// derive; almost a form of proto-button"
%proto-button {
  @extend %heading-epsilon;
  @extend %bare-focus;
  @extend %bare-link;
  @extend %shaded-inside-bottom;
  display: inline-block;
  line-height: 1;
  color: $beigeLight !important;
  padding-right: 1.2rem;
  padding-left: 1.2rem;
  border-radius: $radius;
}

// Psuedoelements don't stick to <input>s, so we
// need to remove the right padding in those cases
input%proto-button {
  @extend %reset-input;
  padding-right: 1.2rem;
}

%teal-button {
  @extend %proto-button;
  @extend %shaded-inside-bottom;
  background-color: $tealLight;
  padding-top: 0.6rem;
  padding-bottom: 0.6rem;
  &:hover, &:focus {
    background-color: $tealMedium;
  }
}

%gray-button {
  @extend %teal-button;
  background-color: $beigeDark;
  &:hover, &:focus {
    background-color: darken($beigeDark, 10%);
  }
}

%dark-button {
  @extend %teal-button;
  color: $grayLighter;
  background-color: $grayDarker;
  &:hover, &:focus {
     color: $beigeLight;
    background-color: $orange;
  }
}

%large-teal-button {
  @extend %teal-button;
  @extend %proto-large-button;
}

%large-gray-button {
  @extend %gray-button;
  @extend %proto-large-button;
}

%large-dark-button {
  @extend %dark-button;
  @extend %proto-large-button;
}

%teal-arrow-button {
  @extend %proto-button;
  @extend %proto-large-button;
  background-color: $tealLight;
  padding-right: 3.7rem;
  position: relative;
  &:after {
    @include svg(circle-arrow-right-beigeLight);
    content: "";
    display: block;
    width: 2rem;
    height: 2rem;
    position: absolute;
    top: 0.6rem;
    right: 0.9rem;
  }
  &:hover {
    background-color: $tealMedium;
  }
}

%teal-plus-button {
  @extend %teal-arrow-button;
  &:after {
    @include svg(circle-plus);
  }
}

%teal-minus-button {
  @extend %teal-arrow-button;
  &:after {
    @include svg(circle-minus);
  }
}

%small-teal-plus-button {
  @extend %teal-button;
  padding-top: 0.6rem;
  padding-right: 3.4rem;
  padding-bottom: 0.6rem;
  position: relative;
  &:after {
    @include svg(circle-plus);
    content: "";
    display: block;
    width: 1.8rem;
    height: 1.8rem;
    position: absolute;
    top: 0.3rem;
    right: 0.9rem;
  }
}

%small-teal-minus-button {
  @extend %small-teal-plus-button;
  &:after {
    @include svg(circle-minus);
  }
}

%small-teal-arrow-button {
  @extend %small-teal-plus-button;
  &:after {
    @include svg(circle-arrow-right-beigeLight);
  }
}

%gray-ex-button {
  @extend %teal-arrow-button;
  background-color: $beigeDark;
  &:after {
    @include svg(circle-x-beigeLight);
  }
  &:hover, &:focus {
    background-color: darken($beigeDark, 12%);
  }
}

// This is $grayDark by default
%check-button {
  @extend %proto-button;
  color: $grayLighter;
  background-color: $grayDarker;
  padding-top: 0.6rem;
  padding-bottom: 0.6rem;
  padding-left: 3.4rem;
  position: relative;
  &:after {
    @include svg(checkbox-unchecked-grayLighter);
    content: "";
    display: block;
    width: 1.6rem;
    height: 1.6rem;
    position: absolute;
    top: 0.4rem;
    left: 0.9rem;
  }
  &:hover, &:focus {
    color: $beigeLight;
    background-color: $orange;
    &:after {
      @include svg(checkbox-unchecked-beigeLight);
    }
  }
  &.active {
    &:after {
      @include svg(checkbox-grayLighter);
    }
    &:hover {
      &:after {
        @include svg(checkbox-beigeLight);
      }
    }
  }
}

%large-check-button {
  @extend %check-button;
  @extend %proto-large-button;
  padding-left: 3.6rem;
  &:after {
    width: 1.8rem;
    height: 1.8rem;
    top: 0.7rem;
    left: 0.9rem;
  }
}

%gray-check-button {
  @extend %check-button;
  color: $beigeLight;
  background-color: $beigeDark;
  &:after {
    @include svg(checkbox-unchecked-beigeLight);
  }
  &:hover, &:focus {
    background-color: darken($beigeDark, 10%);
  }
  &.active {
    &:after {
      @include svg(checkbox-beigeLight);
    }
  }
}

%teal-check-button {
  @extend %gray-check-button;
  background-color: $tealLight;
  &:hover, &:focus {
    background-color: $tealMedium;
  }
}

%large-gray-check-button {
  @extend %gray-check-button;
  @extend %large-check-button;
}

%large-teal-check-button {
  @extend %teal-check-button;
  @extend %large-check-button;
}

// Extended by all large button patterns
// Lives down here so it will be respected
%proto-large-button {
  padding-top: 0.9rem;
  padding-bottom: 1rem;
}

// Not for use on <a>s; use %white-button for those
%white-pill {
  @extend %heading-epsilon;
  display: inline-block;
  color: $tealLighter;
  line-height: 1;
  letter-spacing: 0;
  background-color: $beigeLight;
  // TODO adjust once comps have arrived
  padding: 1rem;
  border-radius: 3.4rem;
  cursor: default;
}

%white-button {
  @extend %white-pill;
  @extend %bare-link;
  &:hover, &:focus {
    color: $beigeLight;
    background-color: $orange;
  }
}

%white-video-button {
  @extend %white-button;
  padding: 1rem 0.7rem 1rem 3.3rem;
  position: relative;
  cursor: pointer;
  &:after {
    @include svg(play-slash);
    content: "";
    display: block;
    width: 2.3rem;
    height: 2.3rem;
    position: absolute;
    top: 0.5rem;
    bottom: 0.5rem;
    left: 0.5rem;
  }
  &:hover {
    &:after {
      @include svg(play-slash-beigeLight);
    }
  }
  &.loading {
    &:hover {
      color: $tealLighter;
      background-color: $beigeLight;
    }
    &:after {
      background: transparent url('spinner-tealLight.png') no-repeat left top;
      background-size: 100%;
    }
  }
}

%solid-ex-button {
  @include opacity(82);
  @include svg(circle-x-gray);
  display: block;
  width: 2rem;
  height: 2rem;
}

// NB uses ems so font-size can be set on component
%arrow-link {
  @extend %bare-link;
  display: inline-block;
  color: $teal;
  padding: 0.2em 2.2em 0.3em 0;
  margin-right: 1.6rem;
  position: relative;
  &:after {
    @include svg(circle-arrow-right-teal);
    content: "";
    display: block;
    width: 1.5em;
    height: 1.5em;
    position: absolute;
    top: 0;
    right: 0;
  }
  &:hover, &:focus {
    color: $orange;
    &:after {
      @include svg(circle-arrow-right-orange);
    }
  }
}

%left-arrow-link {
  @extend %arrow-link;
  padding: 0.2em 0 0.3em 2em;
  &:after {
    @include svg(circle-arrow-left-teal);
    left: 0;
  }
  &:hover, &:focus {
    &:after {
      @include svg(circle-arrow-left-orange);
    }
  }
}

%arrow-link-beige {
  @extend %arrow-link;
  color: $beigeLight;
  &:after {
    @include svg(circle-arrow-right-beige);
  }
}

%arrow-link-beige-light {
  @extend %arrow-link;
  color: $beigeLight;
  &:after {
    @include svg(circle-arrow-right-beigeLight);
  }
}

%bent-arrow-link {
  @extend %arrow-link;
  margin-top: 2.3rem;
  &:after {
    @include svg(circle-arrow-bent-teal);
  }
  &:hover, &:focus {
    color: $orange;
    &:after {
      @include svg(circle-arrow-bent-orange);
    }
  }
}

%minus-link {
  @extend %arrow-link-beige-light;
  &:after {
    @include svg(circle-minus);
  }
  &:hover, &:focus {
    &:after {
      @include svg(circle-minus-orange);
    }
  }
}

%ex-link {
  @extend %arrow-link;
  &:after {
    @include svg(circle-x-teal);
  }
  &:hover, &:focus {
    &:after {
      @include svg(circle-x-orange);
    }
  }
}

// No text, just an ex in a circle
%bare-ex-link {
  @extend %hidden-text;
  display: inline-block;
  width: 3.2rem;
  height: 3.2rem;
  position: relative;
  &:after {
    @include svg(circle-x-tealMedium);
    content: "";
    display: block;
    width: 2rem;
    height: 2rem;
    position: absolute;
    top: 0.6rem;
    left: 0.6rem;
  }
  &:hover, &:focus {
    &:after {
      @include svg(circle-x-orange);
    }
  }
}

// Not just for links!
// NB uses ems so font-size can be set on component
%check-indicator {
  @extend %bare-link;
  display: inline-block;
  color: $teal;
  padding: 0.5em 2.6em 0.6em 0;
  position: relative;
  &:before {
    content: "";
    display: block;
    width: 1.9em;
    height: 1.9em;
    background-color: $tealLighter;
    border-radius: 100%;
    position: absolute;
    top: 0;
    right: 0;
  }
  &.active {
    &:before {
      background-color: $tealLight;
    }
    &:after {
      @include svg(check-beigeLight);
      content: "";
      display: block;
      width: 1.4rem;
      height: 1.1rem;
      position: absolute;
      top: 0.55em;
      right: 0.4em;
    }
  }
}

// NB uses ems so font-size can be set on component
%speech-bubble {
  font-weight: $medium;
  line-height: 1;
  color: $beigeLight;
  background-color: $tealMedium;
  padding: 0.3em 0.7em 0.4em;
  border-radius: $radius;
  margin-bottom: 0.7em;
  position: relative;
  &:after {
    content: "";
    display: block;
    width: 0;
    height: 0;
    border-top: 0.75em solid $tealMedium;
    border-right: 0.666em solid transparent;
    position: absolute;
    left: 0.5em;
    bottom: -0.7em;
  }
}

%speech-bubble-link {
  @extend %speech-bubble;
  @extend %bare-link;
  &:hover, &:focus {
    background-color: $orange;
    &:after {
      border-top-color: $orange;
    }
  }
}


// Lists
// --------------------------
%unstyled-list {
	list-style-type: none;
	padding: 0;
}

%floated-list {
	@extend %clearfix;
	@extend %unstyled-list;
	&>li {
		float: left;
		&>a {
			display: block;
		}
	}
	// &>li + li {
	// 	margin-left: 1em;
	// }
}

%floated-list-right {
  @extend %clearfix;
  @extend %unstyled-list;
  &>li {
    float: right;
    &>a {
      display: block;
    }
  }
  // &>li + li {
  //   margin-right: 1em;
  // }
}

// NB be sure to add the appropriate
// left margin to li + li
%piped-list {
  @extend %floated-list;
  &>li + li {
    position: relative;
    &:before {
      content: "|";
      color: inherit;
      position: absolute;
      top: 0;
      left: -2.2rem;
    }
  }
}

%piped-link-list {
  @extend %piped-list;
  li {
    @extend %heading-epsilon;
    color: transparentize($grayDark, 0.16);
    &.active {
      color: $orange;
    }
    &.inactive {
      @include opacity(35);
      a {
        @extend %inactive-link;
      }
    }
  }
  li + li {
    margin-left: 3.6rem;
    &:before {
      color: transparentize($grayDark, 0.16);
    }
  }
  a {
    @extend %bare-link;
    @extend %orange-hover;
  }
}

%speech-bubble-list {
  @extend %floated-list;
  margin: 0;
  &>li {
    a {
      @extend %epsilon;
      @extend %speech-bubble-link;
    }
  }
  &>li + li {
    margin-left: 0.6rem;
  }
}

// <dl>
%expository-list {
  margin: 0;
  dt {
    @extend %heading-alpha;
    color: $grayDark;
    margin-bottom: 0.8rem;
  }
  dd {
    margin: 0 0 3.2rem 0;
  }
}

// Inputs
// --------------------------
%reset-input {
  -webkit-font-smoothing: antialiased;
  @include font-body;
  border: none;
}

// Extended by %white-text-input & %speech-bubble-input
%text-input {
  @extend %reset-input;
  @extend %bare-focus;
  display: block;
  width: 100%;
  color: $beigeDark;
  background-color: $beigeLight;
  margin-bottom: 1.3rem;
}

%medium-text-input {
  @extend %text-input;
  @extend %gamma;
  @include placeholder($grayLight);
  color: $grayDark;
  padding: 0.6rem 1.1rem;
  border-radius: $radius;
  margin-bottom: 0.7rem;
}

%white-text-input {
  @extend %text-input;
  @extend %alpha;
  @include placeholder($beigeDark);
  padding: 0.8rem 1.4rem 0.8rem;
  border-radius: $radius;
}

%text-area-input {
  @extend %reset-input;
  @extend %bare-focus;
  width: 100%;
  color: $grayDark;
  background-color: $beigeLight;
  padding: 0.7rem 1.1rem 0.7rem;
  border-radius: $radius;
  margin-bottom: 1.3rem;
  resize: none;
}

// NB only extend this onto pseudoelements
%speech-bubble-tail {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border-top: 1.8rem solid $beigeLight;
  .frame-light & {
    border-top: 1.8rem solid $beige;
  }

  border-right: 1.6rem solid transparent;
  position: absolute;
  left: 1.8rem;
  bottom: -1.8rem;
}

// NB extend this on a wrapper around your <input>
// Why? <input>s can't have pseudoelements.
%speech-bubble-input {
  position: relative;
  &:after {
    @extend %speech-bubble-tail;
  }
  input {
    @extend %gamma;
    @extend %text-input;
    font-style: italic;
    padding: 1.2rem 1.3rem 1.2rem;
    margin: 0 0 1.9rem;
  }
  textarea,
  input {
    @include placeholder($beigeDark, italic);
    border-radius: $radius;
  }
}

// NB uses ems so checkbox scales with type
// Be sure to declare font-size on label
%square-checkbox {
	@include opacity(0);
	.lt-ie9 & {
		filter: alpha(opacity=100);
	}
	& + b {
    @include svg(checkbox-unchecked);
		display: block;
    width: 1.2em;
    height: 1.2em;
		position: absolute;
    top: 0;
		left: 0;
		.lt-ie9 & {
			display: none;
		}
	}
	&:checked {
		& + b {
      @include svg(checkbox);
		}
	}
}

%gray-square-checkbox {
  @extend %square-checkbox;
  & + b {
    @include svg(checkbox-unchecked-grayDark);
  }
  &:checked {
    & + b {
      @include svg(checkbox-grayDark);
    }
  }
}

%light-square-checkbox {
  @extend %square-checkbox;
  & + b {
    @include svg(checkbox-unchecked-tealLight);
  }
  &:checked {
    & + b {
      @include svg(checkbox-tealLight);
    }
  }
}

%multicolored-square-checkbox {
  @extend %square-checkbox;
  & + b {
    @include svg(checkbox-unchecked-multi);
    top: 0.1rem;
  }
  &:checked {
    & + b {
      @include svg(checkbox-multi);
    }
  }
}

%round-checkbox {
  @include opacity(0);
  & + b {
    @include svg(radio-unchecked-gray);
    display: block;
    width: 1em;
    height: 1em;
    position: absolute;
    top: 0.1em;
    left: 0;
    .lt-ie9 & {
      display: none;
    }
  }
  &:checked {
    & + b {
      @include svg(radio-checked-gray);
    }
  }
  .lt-ie9 & {
    filter: alpha(opacity=100);
  }
}

// %light-round-checkbox {
//   @extend %round-checkbox;
//   & + b {
//     @include svg(radio-unchecked-beigeLight);
//   }
//   &:checked {
//     & + b {
//       @include svg(radio-checked-beigeLight);
//     }
//   }
// }

%multicolored-round-checkbox {
  @extend %round-checkbox;
  & + b {
    @include svg(radio-unchecked);
  }
  &:checked {
    & + b {
      @include svg(radio);
    }
  }
}

// <label>
%active-label {
  &.active,
  &:hover {
    color: $orange;
    [type="checkbox"],
    [type="radio"] {
      &:checked {
        & + b {
          @include svg(radio-checked-orange);
        }
      }
    }
    b {
      @include svg(radio-unchecked-orange);
    }
  }
  &.active {
    b {
      @include svg(radio-checked-orange);
    }
  }
}

// <label>
%input-label {
	position: relative;
}

// Prevents user from accidentally selecting text
// on click, helpful for labels
%no-select {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

// Editable content
// --------------------------
// Extend onto elements with [contenteditable]
%editable-content {
  border-radius: 0.2rem;
  &:hover,
  &:focus {
    @include box-shadow(0 0 1.6rem 0 transparentize($black, 0.98));
    background-color: transparentize($white, 0.7);
    padding: 0.4rem;
    margin: -0.4rem;
  }
}

// Multi-purpose component patterns
// --------------------------------------------------------
%centered-tile {
	@extend %center;
	width: 60.8rem;
}

%shaded-top {
  @include box-shadow(
    inset 0 2.4rem 1.6rem -1.6rem transparentize($black, 0.82)
  );
}

// NB be sure whatever you extend this onto has positioning, and
// isn't already using its :before pseudoelement
%shaded-bottom {
  &:before {
    @extend %shaded-top;
    content: "";
    display: block;
    height: 2.4rem;
    position: absolute;
    top: 100%;
    right: 0;
    left: 0;
    // Don't let the shadows block the hovers & clicks
    pointer-events: none;
  }
}

// NB this shadow will bleed out on all sides;
// keep calm & mind your overflow
%shaded-sides {
  @include box-shadow(
    0 0 4rem 1.6rem transparentize($black, 0.92)
  );
}

%shaded-inside-right {
  @include box-shadow(
    inset -2.4rem 0 1.6rem -1.6rem transparentize($black, 0.82)
  );
}

%shaded-inside-top-right {
  @include box-shadow(
    inset -2.4rem 0 1.6rem -1.6rem transparentize($black, 0.82),
    inset 0 2.4rem 1.6rem -1.6rem transparentize($black, 0.82)
  );
}

%shaded-inside-bottom {
  @include box-shadow(
    inset 0 -3.6rem 3.6rem -3.6rem transparentize($black, 0.5)
  );
}

%gradient-dark-bottom {
  @include gradient-vertical(transparent, transparentize($black, 0.72));
}

%truncated {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Frame
// --------------------------------------------------------
%frame {
  @extend %clearfix;
   // TODO adjust right & left padding if necessary
  padding: 3.4rem 3.2rem 2.4rem;
  position: relative;
  z-index: 110;
  &:nth-child(even) {
    background-color: $beigeLight;
  }
  &:last-child {
    padding-bottom: 8rem;
  }
}

%constrained-frame {
  @extend %frame;
  &:last-child {
    padding-bottom: 2.4rem;
  }
}

%frame--left {
  width: 28%;
  float: left;
}

%frame--right {
  width: 72%;
  padding-left: 2.4rem;
  float: left;
}

// Dropdowns
// --------------------------------------------------------
// Only necessary if element doesn't already have positioning
%dropdown-container {
  position: relative;
}

// Extending this is optional
%dropdown-toggle {
  @extend %beta-alt;
  @extend %bare-link;
  @extend %bare-focus;
  @extend %shaded-inside-bottom;
  @include background-clip(padding);
  display: inline-block;
  height: 3.2rem;
  line-height: 1;
  color: $grayLighter;
  background-color: $grayDarker;
  padding: 0.6rem 2.6rem 0.7rem 1.1rem;
  border-right: 0.2rem solid transparent;
  border-radius: $radius 0 0 $radius;
  margin-right: 3.6rem;
  position: relative;
  cursor: pointer;
  &:before {
    @extend %shaded-inside-bottom;
    content: "";
    background-color: inherit;
    display: block;
    width: 3.6rem;
    height: 3.2rem;
    border-radius: 0 $radius $radius 0;
    position: absolute;
    top: 0;
    right: -3.8rem;
  }
  &:after {
    @include svg(arrow-down-gray);
    content: "";
    display: block;
    width: 1.8rem;
    height: 0.9rem;
    position: absolute;
    top: 1.3rem;
    right: -2.8rem;
  }
  &:hover,
  .open & {
    color: $orange;
    background-color: $grayDarkest;
    &:before {
      background-color: inherit;
    }
    &:after {
      @include svg(arrow-down-orange);
    }
  }
}

%dropdown-toggle-dark {
  @extend %dropdown-toggle;
  background-color: $grayDarkest;
}

// NB make sure your dropdown matches your toggle, as they say
%dropdown-toggle-teal {
  @extend %dropdown-toggle;
  color: $beigeLight;
  background-color: $tealMedium;
  &:after {
    @include svg(arrow-down-beigeLight);
  }
  &:hover,
  .open & {
    color: $beigeLight;
    background-color: darken($tealMedium, 5%);
    &:after {
      @include svg(arrow-down-beigeLight);
    }
  }
}

%dropdown {
  display: none;
  min-width: 100%;
  background-color: darken($grayDarkest, 3%);
  padding: 1.8rem 2rem;
  border-radius: $radius * 2;
  margin-top: 2rem;
  position: absolute;
  top: 32px;
  left: 0;
  z-index: 350;
  &:before {
    content: "";
    display: block;
    width: 0;
    height: 0;
    border-right: 1.5rem solid transparent;
    border-left: 1.5rem solid transparent;
    border-bottom: 1.5rem solid darken($grayDarkest, 3%);
    position: absolute;
    top: -1.5rem;
    // TODO adjust
    left: 4rem;
  }
  ul {
    padding: 0;
    margin: 0;
  }
  li + li {
    // TODO refactor this so top & bottom padding are equal
    padding-top: 1.1rem;
    border-top: 0.1rem solid $grayDark;
    margin-top: 1rem;
  }
  a {
    @extend %gamma;
    @extend %bare-link;
    display: block;
    // TODO is this a good way to force width?
    // Test with many different widths
    white-space: pre;
    line-height: 1;
    color: $grayLighter;
    small {
      color: $grayDark;
    }
    &:hover,
    &.active {
      color: $orange;
    }
  }
  .open & {
    display: block;
  }
}

%dropdown-teal {
  @extend %dropdown;
  background-color: darken($tealMedium, 10%);
  &:before {
    border-bottom-color: darken($tealMedium, 10%);
  }
  li + li {
    border-top-color: transparentize($beigeLight, 0.5);
  }
  a {
    color: $beigeLight;
    &:hover,
    &.active {
      color: $beigeLight;
    }
  }
}

// TODO should items be right-aligned?
%dropdown-right {
  @extend %dropdown;
  right: 0;
  left: auto;
  &:before {
    // TODO adjust
    right: 4rem;
    left: auto;
  }
}

// Box
// --------------------------------------------------------
// NB be sure to wrap %box--title & %box--link in a <header>
%box {
  background-color: $beigeLight;
  position: relative;
  header {
    @extend %gradient-dark-bottom;
    background-color: $tealLight;
    padding: 0.7rem 1.4rem 0.8rem;
    position: relative;
    z-index: 110;
  }
}

// Lives inside %box>header
%box--title {
  @extend %beta-alt;
  color: $beigeLight;
  line-height: 1;
}

// Lives inside %box>header
%box--link {
  @extend %heading-epsilon;
  @extend %arrow-link-beige-light;
  margin-right: 0;
  position: absolute;
  top: 0.7rem;
  right: 1.4rem;
}

// Lives inside %box>header
%box--minus-link {
  @extend %heading-epsilon;
  @extend %minus-link;
  margin-right: 0;
  position: absolute;
  top: 0.7rem;
  right: 1.4rem;
}

%box--content {
  padding: 1.6rem;
}

// NB make sure the height of %box is
// constrained if you want this to work
%box--scrolly-content {
  position: absolute;
  top: 5rem;
  right: 1.6rem;
  bottom: 1.6rem;
  left: 1.6rem;
  overflow-y: scroll;
  z-index: 100;
  &::-webkit-scrollbar {
    width: 1.2rem;
    height: 1.2rem;
  }
  &::-webkit-scrollbar-thumb {
    background: transparentize($gray, 0.4);
    border-radius: 1.6rem;
  }
  &::-webkit-scrollbar-track {
    background-color: $beige;
    border-radius: 1.6rem;
  }
}

// Avatars
// --------------------------------------------------------
// NB be sure to include <img> in your markup
%round-avatar {
  @include border-radius(100%);
  width: 4.8rem;
  height: 4.8rem;
  border: 0.2rem solid $tealLight;
  overflow: hidden;
  img {
    @include border-radius(100%);
    display: block;
    width: 100%;
  }
}

// Score list
// --------------------------------------------------------
%score-list {
  @extend %unstyled-list;
  margin: 0;
  li + li {
    margin-top: 1.2rem;
  }
}

%big-score-list {
  @extend %unstyled-list;
  margin: 0;
  li + li {
    margin-top: 1.5rem;
  }
}

// Extended by %active-criterion & %inactive-criterion
%criterion {
  height: 5rem;
  border-radius: 5rem;
  position: relative;
  cursor: default;
}

%big-criterion {
  height: 5.5rem;
  border-radius: 5.5rem;
  position: relative;
}

// Extended by %active-criterion & %big-active-criterion
%active-base {
  @include background-size(contain);
  background-color: $tealLighter;
  @if $mode == production {
    background-image: inline-image('bg-criterion.png');
  }
  @else {
    background-image: url('bg-criterion.png');
  }
  background-repeat: repeat-y;
  background-position: right top;
  background-origin: content-box;
  &:hover {
    background-color: $orangeLight;
    @if $mode == production {
      background-image: inline-image('bg-criterion-hover.png');
    }
    @else {
      background-image: url('bg-criterion-hover.png');
    }
    .indicator {
      background-color: $orange;
    }
  }
}

%active-criterion {
  @extend %active-base;
  @extend %criterion;
}

%big-active-criterion {
  @extend %active-base;
  @extend %big-criterion;
}

%inactive-criterion {
  @extend %criterion;
  background-color: $grayLighter;
}

%big-inactive-criterion {
  @extend %big-criterion;
  background-color: $grayLighter;
}

%score--title {
  @extend %beta-alt;
  @extend %no-select;
  font-weight: $medium;
  color: $beigeLight;
  line-height: 1;
  padding-top: 1.5rem;
  position: absolute;
  top: 0;
  left: 2.7rem;
  small {
    font-weight: $regular;
  }
}

%big-score--title {
  @extend %score--title;
  padding-top: 1.75rem;
}

%score--value {
  @extend %giga-alt;
  @extend %no-select;
  @include font-head;
  color: $beigeLight;
  line-height: 1;
  padding-top: 0.6rem;
  position: absolute;
  top: 0;
  right: 1.7rem;
  small {
    @extend %mega;
    vertical-align: top;
    line-height: 1.1;
    padding-left: 0.2rem;
  }
}

%small-score--value {
  @extend %gamma-sup;
  @extend %no-select;
  @include font-head;
  color: $beigeLight;
  line-height: 1;
  padding-top: 0.7rem;
  position: absolute;
  top: 0;
  right: 1.7rem;
  small {
    @extend %gamma-sup;
    vertical-align: top;
    line-height: 1.1;
    padding-left: 0.2rem;
  }
}

%big-score--value {
  @extend %score--value;
  padding-top: 0.85rem;
}

// Comments
// --------------------------------------------------------
%comment {
  background-color: $beigeLight;
  .frame-light &, .box & {
    background-color: $beige;
  }

  padding: 1.6rem 1.8rem;
  border-radius: $radius;
}

%comment-list {
  @extend %unstyled-list;
  margin: 0;
  &>li {
    background-color: $beige;
    padding: 1.2rem 1.4rem;
    border-radius: $radius;
    margin-bottom: 2rem;
    position: relative;
    &:after {
      @extend %speech-bubble-tail;
      border-top-color: $beige;
    }
  }
  &>li + li {
    margin-top: 2.6rem;
  }
}

// Headers
// --------------------------------------------------------
// Avatar header
// --------------------------
// NB be sure to include .avatar & <img> in your markup
%avatar-header {
  padding: 0.1rem 0 0.2rem 5.7rem;
  margin-bottom: 1.2rem;
  position: relative;
  .avatar {
    @extend %round-avatar;
    position: absolute;
    top: 0;
    left: 0;
  }
}

%avatar-header--title {
  @extend %beta;
  font-weight: $medium;
  color: $teal;
  margin-bottom: 0.1rem;
}

%avatar-header--subtitle {
  @extend %epsilon;
  color: $beigeDark;
  margin-left: 0.1rem;
}

// Horizontal header
// --------------------------
// NB be sure to wrap subtitles in an <aside>
%horizontal-header {
  @extend %clearfix;
  margin-bottom: 1.5rem;
  aside {
    padding-left: 1.6rem;
    border-left: 0.2rem solid $gray;
    margin: 0.3rem 0 0 1.8rem;
    float: left;
  }
}

%horizontal-header--title {
  @extend %heading-tera;
  float: left;
}

%horizontal-header--subtitle {
  @extend %gamma;
  color: $gray;
  line-height: 1;
  &:last-child {
    margin-top: 0.7rem;
  }
}

// Annotated media
// --------------------------------------------------------
// NB be sure to wrap annotations box in a <figcaption>
%annotated-media {
  position: relative;
  figcaption {
    width: 45%;
    padding-left: 1.6rem;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
  }
}

%annotated-media--object {
  display: block;
  width: 55%;
}

// Alerts
// --------------------------------------------------------
%alert {
  @extend %clearfix;
  color: $darker;
  padding: 2rem 6.4rem 2rem 2rem;
  border-radius: $radius;
  margin: 1rem 3.2rem 0;
  position: relative;
  &:first-child {
    margin-top: 2.7rem;
  }
  p {
    @extend %gamma-sub;
    line-height: 1.1;
    color: $darker;
    padding-left: 2rem;
    border-left: 0.1rem solid $darker;
    margin-top: 0.5rem;
    margin-bottom: 0.4rem;
  }
  .flash-fullbleed & {
    margin: 0;
    border-radius: 0;
  }
  .authentication & {
    @extend %centered-tile;
  }
  .bar-header & {
    margin-right: 0;
    margin-left: 0;
  }
}

// Lives inside %alert
// NB be sure to set a width and background-image
// when you extend this
%alert--label {
  height: 2.8rem;
  position: absolute;
  top: 1.8rem;
  left: 2.5rem;
}

// Lives inside %alert
%alert--close {
  @include svg(circle-x-gray);
  display: block;
  width: 2rem;
  height: 2rem;
  position: absolute;
  top: 2.3rem;
  right: 2.4rem;
}

%mini-alert {
  background-color: $redLight;
  padding: 1rem 2rem;
  border-radius: $radius;
  margin: 0 -2rem 2.4rem;
  h2,
  ul,
  p {
    @extend %gamma-sub;
    line-height: 1;
    color: $darker;
    padding: 0.4rem 0;
    margin: 0;
  }
  ul,
  p {
    font-style: italic;
  }
  ul {
    padding-left: 1.4em;
  }
}

// Progress bars
// --------------------------------------------------------
// NB be sure to include an .indicator element in your markup
%progress-bar {
  height: 1.6rem;
  background-color: $tealLighter;
  border-radius: 1.6rem;
  overflow: hidden;
  .indicator {
    display: block;
    height: 100%;
    background-color: $tealLight;
  }
}




















